openapi: 3.0.0

info:
  title: "Safenetpay Open Api Specification"
  description: "Setting service - Safenetpay Open Api Specification"
  version: "1.0.1"
  contact:
    name: "Api Support"
    url: "http://safenetpay.com/support"
    email: "developers@safenetpay.com"
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: '{protocol}://{address}:{port}'
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      address:
        default: 'localhost'
        description: Service address
      port:
        default: '7024'
        description: Service Port
security:
  - ApiKeyAuth: []

paths:

  /setting/settings-data/add:
    post:
      operationId: settingSettingsDataAdd
      tags: ["Setting SettingsData"]
      summary: "Add Setting SettingsData"
      requestBody:
        $ref: '#/components/requestBodies/RequestBodySettingsData'
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /setting/settings-data/delete:
    post:
      operationId: settingSettingsDataDelete
      tags: ["Setting SettingsData"]
      summary: "Delete Setting SettingsData "
      requestBody:
        $ref: "#/components/requestBodies/RequestSettingsDataId"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /setting/settings-data/get:
    post:
      operationId: settingSettingsDataGet
      tags: ["Setting SettingsData"]
      summary: "Get Setting SettingsData"
      requestBody:
        $ref: "#/components/requestBodies/RequestSettingsDataId"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"
  
  /setting/settings-data/getConfig:
    post:
      operationId: settingSettingsDataGetConfig
      tags: ["Setting SettingsDataConfig"]
      summary: "Get Setting SettingsDataConfig"
      requestBody:
        $ref: "#/components/requestBodies/RequestSettingsDataConfig"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /setting/settings-data/get-list:
    post:
      operationId: settingSettingsDataGetList
      tags: ["Setting SettingsData"]
      summary: "Get Setting settingsData List"
      requestBody:
        $ref: '#/components/requestBodies/RequestListParams'
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /setting/settings-data/update:
    post:
      operationId: settingSettingsDataUpdate
      tags: ["Setting SettingsData"]
      summary: "Update Setting SettingsData"
      requestBody:
        $ref: '#/components/requestBodies/RequestBodySettingsData'
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /setting/settings-data/get-summary-list:
    post:
      operationId: settingSettingsDataGetSummaryList
      tags: ["Setting SettingsData Summary"]
      summary: "Get Setting settingsData Summary"
      requestBody:
        $ref: "#/components/requestBodies/RequestSortFilterList"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"                    

components:
  securitySchemes:
    ApiKeyAuth:
     type: apiKey
     in: header
     name: token
  schemas:
    NullValue:
      not:
        anyOf:
          - type: string
          - type: number
          - type: boolean
          - type: object

    settingsDataId:
      type: object
      required:
        - settings_data_id
      properties:
        settings_data_id:
          type: integer
          nullable: true
          format: int64

    settingsDataConfig:
      type: object
      properties:
        key:
          type: string
          nullable: true
          example: "Account-EURO"

    SettingsData:
      allOf:
        - $ref: "#/components/schemas/settingsDataId"
        - type: object
          properties:
            key:
              type: string
              nullable: true
            value:
              type: string
              nullable: true
            valid_from:
              type: string
              example: "2019-06-01 18:19:39.000+0500"
              nullable: true
            valid_to:
              type: string
              example: "2019-06-01 18:19:39.000+0500"
              nullable: true
    Request:
      required:
        - jsonrpc
        - id
        - params
      properties:
        jsonrpc:
          type: string
          enum:
            - "2.0"
          example: "2.0"
        id:
          type: integer
          format: int64
          example: 10
        params:
          type: object
    Response:
      properties:
        id:
          type: integer
          format: int64
        result:
          type: object
          nullable: true
          example: null
        error:
          type: object
          nullable: true
          example: null
    ResponseSuccess:
      allOf:
        - $ref: "#/components/schemas/Response"
        - type: object
          properties:
            result:
              type: object
              nullable: false
              example: {}
    ResponseError:
      allOf:
        - $ref: "#/components/schemas/Response"
        - type: object
          properties:
            error:
              type: object
              nullable: false
              properties:
                code:
                  type: integer
                  format: int64
                  nullable: false
                  example: 1000
                message:
                  type: string
                  nullable: false
                  example: "any error response text message"
              example: { code: 1000, message: "any error response text message"}
    listParams:
      type: object
      properties:
        skip_count:
          type: integer
          nullable: true
          example: 0
        page_size:
          type: integer
          nullable: true
          example: 20
  requestBodies:
    RequestSortFilterList:
      description: "Standard get ordered sorted list Request"
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Request'
              - type: object
            properties:
              params:
                allOf:
                  - type: object
                    properties:
                      sort_expression:
                        type: string
                        nullable: true
                      filter_condition:
                        type: string
                        nullable: true
                  - $ref: '#/components/schemas/listParams'
    RequestSettingsDataIdListParams:
      description: "Standard get list by SettingsData Request"
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Request'
              - type: object
                properties:
                  params:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/settingsDataId'
                      - $ref: '#/components/schemas/listParams'
    RequestListParams:
      description: "Standard get list"
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Request'
              - type: object
                properties:
                  params:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/listParams'
    RequestSettingsDataId:
      description: "Standard SettingsData Request"
      required: true
      content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Request'
                - type: object
                  properties:
                    params:
                      $ref: '#/components/schemas/settingsDataId'

    RequestSettingsDataConfig:
      description: "Standard SettingsData Request"
      required: true
      content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Request'
                - type: object
                  properties:
                    params:
                      $ref: '#/components/schemas/settingsDataConfig'

    RequestBodySettingsData:
      description: "Add SettingsData Request"
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Request'
              - type: object
                properties:
                  params:
                    type: object
                    properties:
                      settings_data:
                        $ref: '#/components/schemas/SettingsData'
  responses:
    Success:
      description: "Success Response"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseSuccess"
    Error:
      description: "Error response"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseError"
